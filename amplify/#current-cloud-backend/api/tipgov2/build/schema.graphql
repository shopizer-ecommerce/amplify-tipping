
type User {
  id: ID!
  locale: String!
  email: AWSEmail!
  name: String
  internalId: String
  birthdate: AWSDate
  gender: String
  firstName: String
  lastName: String
  address: String
  city: String
  postalCode: String
  province: String
  country: String
  phone: String
  agreement: Boolean
  image: String
  banking: String
  transit: String
  account: String
  verified: Boolean
  export: AWSDate
  ext: Boolean
  hotel: String
  shortId: String
  _version: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}

type Hotel {
  id: ID!
  hotelID: ID!
  locale: String!
  code: String!
  name: String!
  address: String
  city: String
  postalCode: String
  province: String
  country: String
  phone: String
  image: String
  _version: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelUserConnection {
  items: [User]!
  nextToken: String
}

input ModelUserFilterInput {
  id: ModelIDInput
  locale: ModelStringInput
  email: ModelStringInput
  name: ModelStringInput
  internalId: ModelStringInput
  birthdate: ModelStringInput
  gender: ModelStringInput
  firstName: ModelStringInput
  lastName: ModelStringInput
  address: ModelStringInput
  city: ModelStringInput
  postalCode: ModelStringInput
  province: ModelStringInput
  country: ModelStringInput
  phone: ModelStringInput
  agreement: ModelBooleanInput
  image: ModelStringInput
  banking: ModelStringInput
  transit: ModelStringInput
  account: ModelStringInput
  verified: ModelBooleanInput
  export: ModelStringInput
  ext: ModelBooleanInput
  hotel: ModelStringInput
  shortId: ModelStringInput
  _version: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

type Query {
  getUser(id: ID!): User
  listUsers(id: ID, filter: ModelUserFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelUserConnection
  getHotel(id: ID!): Hotel
  listHotels(id: ID, filter: ModelHotelFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelHotelConnection
  userByEmail(email: AWSEmail!, sortDirection: ModelSortDirection, filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  locale(locale: String!, sortDirection: ModelSortDirection, filter: ModelHotelFilterInput, limit: Int, nextToken: String): ModelHotelConnection
}

input ModelUserConditionInput {
  locale: ModelStringInput
  email: ModelStringInput
  name: ModelStringInput
  internalId: ModelStringInput
  birthdate: ModelStringInput
  gender: ModelStringInput
  firstName: ModelStringInput
  lastName: ModelStringInput
  address: ModelStringInput
  city: ModelStringInput
  postalCode: ModelStringInput
  province: ModelStringInput
  country: ModelStringInput
  phone: ModelStringInput
  agreement: ModelBooleanInput
  image: ModelStringInput
  banking: ModelStringInput
  transit: ModelStringInput
  account: ModelStringInput
  verified: ModelBooleanInput
  export: ModelStringInput
  ext: ModelBooleanInput
  hotel: ModelStringInput
  shortId: ModelStringInput
  _version: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
}

input CreateUserInput {
  id: ID
  locale: String!
  email: AWSEmail!
  name: String
  internalId: String
  birthdate: AWSDate
  gender: String
  firstName: String
  lastName: String
  address: String
  city: String
  postalCode: String
  province: String
  country: String
  phone: String
  agreement: Boolean
  image: String
  banking: String
  transit: String
  account: String
  verified: Boolean
  export: AWSDate
  ext: Boolean
  hotel: String
  shortId: String
  _version: String
}

input UpdateUserInput {
  id: ID!
  locale: String
  email: AWSEmail
  name: String
  internalId: String
  birthdate: AWSDate
  gender: String
  firstName: String
  lastName: String
  address: String
  city: String
  postalCode: String
  province: String
  country: String
  phone: String
  agreement: Boolean
  image: String
  banking: String
  transit: String
  account: String
  verified: Boolean
  export: AWSDate
  ext: Boolean
  hotel: String
  shortId: String
  _version: String
}

input DeleteUserInput {
  id: ID!
}

type Mutation {
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User
  createHotel(input: CreateHotelInput!, condition: ModelHotelConditionInput): Hotel
  updateHotel(input: UpdateHotelInput!, condition: ModelHotelConditionInput): Hotel
  deleteHotel(input: DeleteHotelInput!, condition: ModelHotelConditionInput): Hotel
}

type Subscription {
  onCreateUser(owner: String): User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser(owner: String): User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser(owner: String): User @aws_subscribe(mutations: ["deleteUser"])
  onCreateHotel(owner: String): Hotel @aws_subscribe(mutations: ["createHotel"])
  onUpdateHotel(owner: String): Hotel @aws_subscribe(mutations: ["updateHotel"])
  onDeleteHotel(owner: String): Hotel @aws_subscribe(mutations: ["deleteHotel"])
}

type ModelHotelConnection {
  items: [Hotel]!
  nextToken: String
}

input ModelHotelFilterInput {
  id: ModelIDInput
  hotelID: ModelIDInput
  locale: ModelStringInput
  code: ModelStringInput
  name: ModelStringInput
  address: ModelStringInput
  city: ModelStringInput
  postalCode: ModelStringInput
  province: ModelStringInput
  country: ModelStringInput
  phone: ModelStringInput
  image: ModelStringInput
  _version: ModelStringInput
  and: [ModelHotelFilterInput]
  or: [ModelHotelFilterInput]
  not: ModelHotelFilterInput
}

input ModelHotelConditionInput {
  hotelID: ModelIDInput
  locale: ModelStringInput
  code: ModelStringInput
  name: ModelStringInput
  address: ModelStringInput
  city: ModelStringInput
  postalCode: ModelStringInput
  province: ModelStringInput
  country: ModelStringInput
  phone: ModelStringInput
  image: ModelStringInput
  _version: ModelStringInput
  and: [ModelHotelConditionInput]
  or: [ModelHotelConditionInput]
  not: ModelHotelConditionInput
}

input CreateHotelInput {
  id: ID
  hotelID: ID!
  locale: String!
  code: String!
  name: String!
  address: String
  city: String
  postalCode: String
  province: String
  country: String
  phone: String
  image: String
  _version: String
}

input UpdateHotelInput {
  id: ID!
  hotelID: ID
  locale: String
  code: String
  name: String
  address: String
  city: String
  postalCode: String
  province: String
  country: String
  phone: String
  image: String
  _version: String
}

input DeleteHotelInput {
  id: ID!
}

input ModelHotelByCodeByLocaleCompositeKeyConditionInput {
  eq: ModelHotelByCodeByLocaleCompositeKeyInput
  le: ModelHotelByCodeByLocaleCompositeKeyInput
  lt: ModelHotelByCodeByLocaleCompositeKeyInput
  ge: ModelHotelByCodeByLocaleCompositeKeyInput
  gt: ModelHotelByCodeByLocaleCompositeKeyInput
  between: [ModelHotelByCodeByLocaleCompositeKeyInput]
  beginsWith: ModelHotelByCodeByLocaleCompositeKeyInput
}

input ModelHotelByCodeByLocaleCompositeKeyInput {
  code: String
  locale: String
}

